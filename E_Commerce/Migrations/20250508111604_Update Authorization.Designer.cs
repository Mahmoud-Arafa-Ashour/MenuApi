// <auto-generated />
using System;
using E_Commerce.Persistant;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250508111604_Update Authorization")]
    partial class UpdateAuthorization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("E_Commerce.Models.Discount", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndAt")
                        .HasColumnType("date");

                    b.Property<decimal>("NewPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("OldPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateOnly>("StartAt")
                        .HasColumnType("date");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("E_Commerce.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Items");
                });

            modelBuilder.Entity("E_Commerce.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("E_Commerce.Models.OfferItem", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OfferId", "CategoryId", "ItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemId");

                    b.ToTable("OfferItems");
                });

            modelBuilder.Entity("E_Commerce.Persistant.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isDefault")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01969f7b-622a-7fd8-a041-5777b032bfa9",
                            ConcurrencyStamp = "01969f7b-622a-7fd8-a041-5778339daaab",
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            isDefault = false
                        },
                        new
                        {
                            Id = "01969f7b-622a-7fd8-a041-5779e9a0ce8b",
                            ConcurrencyStamp = "01969f7b-622a-7fd8-a041-577a817dd965",
                            IsDeleted = false,
                            Name = "Owner",
                            NormalizedName = "OWNER",
                            isDefault = true
                        });
                });

            modelBuilder.Entity("E_Commerce.Persistant.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResturnatName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "01969f7b-622a-7fd8-a041-57743843d5a0",
                            AccessFailedCount = 0,
                            Adress = "Digital Menu Street",
                            ConcurrencyStamp = "01969f7b-622a-7fd8-a041-5776080ebb3e",
                            Email = "Admin@Gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Digital Menu",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENa2BoTsGfnVol62wpDi6wA8yML6MQFkpUQdYCwTaNrYcSV2kgmjDqFEhLGhMbNMug==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            ResturnatName = "Digital Menu Restaurant",
                            SecurityStamp = "01969f7b622a7fd8a04157757267ddaf",
                            TwoFactorEnabled = false,
                            UserName = "Admin@Gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permissions",
                            ClaimValue = "info",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permissions",
                            ClaimValue = "UpdateInfo",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permissions",
                            ClaimValue = "ChangePassword",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permissions",
                            ClaimValue = "Category:ReadAll",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permissions",
                            ClaimValue = "Category:GetByid",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permissions",
                            ClaimValue = "Category:Add",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permissions",
                            ClaimValue = "Category:Update",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permissions",
                            ClaimValue = "Category:Delete",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Permissions",
                            ClaimValue = "Discount:Add",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Permissions",
                            ClaimValue = "Discount:Update",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Permissions",
                            ClaimValue = "Discount:Delete",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Permissions",
                            ClaimValue = "Item:ReadAll",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Permissions",
                            ClaimValue = "Item:GetByid",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Permissions",
                            ClaimValue = "Item:Add",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Permissions",
                            ClaimValue = "Item:Update",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Permissions",
                            ClaimValue = "Item:Delete",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Permissions",
                            ClaimValue = "OfferItem:ReadAll",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Permissions",
                            ClaimValue = "OfferItem:Add",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Permissions",
                            ClaimValue = "OfferItem:Update",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Permissions",
                            ClaimValue = "Offer:ReadAll",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Permissions",
                            ClaimValue = "Offer:GetByid",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Permissions",
                            ClaimValue = "Offer:Add",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "Permissions",
                            ClaimValue = "Offer:Update",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "Permissions",
                            ClaimValue = "Offer:Delete",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "01969f7b-622a-7fd8-a041-57743843d5a0",
                            RoleId = "01969f7b-622a-7fd8-a041-5777b032bfa9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Commerce.Models.Discount", b =>
                {
                    b.HasOne("E_Commerce.Models.Category", "Category")
                        .WithMany("Discounts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Item", "Item")
                        .WithOne("Discount")
                        .HasForeignKey("E_Commerce.Models.Discount", "ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("E_Commerce.Models.Item", b =>
                {
                    b.HasOne("E_Commerce.Models.Category", "Category")
                        .WithMany("items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_Commerce.Models.OfferItem", b =>
                {
                    b.HasOne("E_Commerce.Models.Category", "Category")
                        .WithMany("OfferItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Item", "Item")
                        .WithMany("OfferItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("E_Commerce.Models.Offer", "Offer")
                        .WithMany("OfferItems")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Item");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("E_Commerce.Persistant.ApplicationUser", b =>
                {
                    b.OwnsMany("E_Commerce.Models.RefreshTokens", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RefreshTokens", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("E_Commerce.Persistant.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_Commerce.Persistant.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_Commerce.Persistant.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("E_Commerce.Persistant.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Persistant.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_Commerce.Persistant.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.Models.Category", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("OfferItems");

                    b.Navigation("items");
                });

            modelBuilder.Entity("E_Commerce.Models.Item", b =>
                {
                    b.Navigation("Discount");

                    b.Navigation("OfferItems");
                });

            modelBuilder.Entity("E_Commerce.Models.Offer", b =>
                {
                    b.Navigation("OfferItems");
                });
#pragma warning restore 612, 618
        }
    }
}
